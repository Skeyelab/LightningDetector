; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = sender

# =============================================================================
# BASE CONFIGURATION
# =============================================================================
[env]
platform = espressif32
framework = arduino
lib_deps =
	olikraus/U8g2 @ ^2.36.0
	jgromes/RadioLib @ ^6.5.0
	ArduinoJson @ ^6.21.4
monitor_speed = 115200
build_flags =
	-D LORA_FREQ_MHZ=915.0
	-D LORA_BW_KHZ=125.0
	-D LORA_SF=9
	-D LORA_CR=5
	-D LORA_TX_DBM=17

# =============================================================================
# DEVICE-SPECIFIC BASE ENVIRONMENTS
# =============================================================================

# Heltec WiFi LoRa 32 V3 (OLED display, no GPS)
[env:heltec-v3]
extends = env
board = heltec_wifi_lora_32_V3
build_flags =
	${env.build_flags}
	-D HELTEC_V3_OLED=1
	-D DEVICE_TYPE=HELTEC_V3
build_src_filter = +<*> -<examples/>
upload_port = /dev/cu.usbserial-0001

# Heltec Wireless Tracker V1.1 (TFT-LCD display, built-in GPS)
[env:wireless-tracker]
extends = env
board = esp32-s3-devkitc-1
build_flags =
	${env.build_flags}
	-D WIRELESS_TRACKER=1
	-D DEVICE_TYPE=WIRELESS_TRACKER
	-D ARDUINO_USB_MODE=1
	-D ARDUINO_USB_CDC_ON_BOOT=1
build_src_filter = +<*> -<examples/>
upload_port = /dev/cu.usbmodem401101

# =============================================================================
# FIRMWARE ROLE ENVIRONMENTS
# =============================================================================

# Heltec V3 - Sender Firmware
[env:sender]
extends = env:heltec-v3
build_flags =
	${env:heltec-v3.build_flags}
	-D ROLE_SENDER=1
lib_deps = ${env.lib_deps}

# Heltec V3 - Receiver Firmware (with WiFi/OTA)
[env:receiver]
extends = env:heltec-v3
build_flags =
	${env.build_flags}
	-D ROLE_RECEIVER=1
	-D ENABLE_WIFI_OTA=1
	-D ENABLE_WEB_SERVER=1
lib_deps =
	${env.lib_deps}
	WiFi
	ArduinoOTA
	Update
upload_speed = 921600
# SPIFFS upload for web files
board_build.filesystem = spiffs
board_build.spiffs_start = 0x900000
board_build.spiffs_end = 0x9E0000

# Wireless Tracker - Sender Firmware
[env:wireless-tracker-sender]
extends = env:wireless-tracker
build_flags =
	${env.build_flags}
	-D ROLE_SENDER=1
	-D ENABLE_WIFI_OTA=1
lib_deps =
	${env.lib_deps}
	WiFi

# Wireless Tracker - Receiver Firmware (with WiFi/OTA/SPIFFS)
[env:wireless-tracker-receiver]
extends = env:wireless-tracker
build_flags =
	${env.build_flags}
	-D ROLE_RECEIVER=1
	-D ENABLE_WIFI_OTA=1
	-D ENABLE_WEB_SERVER=1
lib_deps =
	${env.lib_deps}
	WiFi
	ArduinoOTA
	Update
# SPIFFS upload for web files
board_build.filesystem = spiffs
board_build.spiffs_start = 0x900000
board_build.spiffs_end = 0x9E0000

# =============================================================================
# CODE QUALITY ENVIRONMENTS
# =============================================================================

# Static Analysis - Sender
[env:sender-check]
extends = env:sender
check_tool = cppcheck
check_flags =
    cppcheck: --enable=all --suppress=missingIncludeSystem --suppress=unusedFunction --suppress=unusedVariable --suppress=noExplicitConstructor --suppress=cstyleCast --suppress=missingInclude --suppress=unusedStructMember --suppress=unusedPrivateFunction --suppress=unmatchedSuppression
check_skip_packages = yes
check_src_filters = +<src/> -<.pio/> -<.vscode/>

# Static Analysis - Receiver
[env:receiver-check]
extends = env:receiver
check_tool = cppcheck
check_flags =
    cppcheck: --enable=all --suppress=missingIncludeSystem --suppress=unusedFunction --suppress=unusedVariable --suppress=noExplicitConstructor --suppress=cstyleCast --suppress=missingInclude --suppress=unusedStructMember --suppress=unusedPrivateFunction --suppress=unmatchedSuppression
check_skip_packages = yes
check_src_filters = +<src/> -<.pio/> -<.vscode/>

# Code Quality - Sender
[env:sender-tidy]
extends = env:sender
check_tool = clangtidy
check_flags =
    clangtidy: --config-file=.clang-tidy --header-filter='^src/.*\.(h|hpp)$'
check_skip_packages = yes
check_src_filters = +<src/>

# Code Quality - Receiver
[env:receiver-tidy]
extends = env:receiver
check_tool = clangtidy
check_flags =
    clangtidy: --config-file=.clang-tidy --header-filter='^src/.*\.(h|hpp)$'
check_skip_packages = yes
check_src_filters = +<src/>

# =============================================================================
# TESTING ENVIRONMENTS (Native)
# =============================================================================

# General native testing
[env:native]
platform = native
framework =
lib_deps =
test_build_src = no
build_flags = -D UNIT_TEST -std=c++17 -D ARDUINO_MOCK -I test/mocks
build_src_filter = +<src/hardware/> +<test/mocks/>
test_ignore = test_wifi_* test_integration test_app_logic test_error_handler test_modular_architecture test_sensor_framework test_state_machine test_hardware_abstraction
build_unflags = -D HELTEC_V3_OLED -D OLED_SDA -D OLED_SCL -D LORA_FREQ_MHZ -D LORA_BW_KHZ -D LORA_SF -D LORA_CR -D LORA_TX_DBM

# Hardware abstraction testing
[env:native-hardware]
platform = native
framework =
lib_deps =
test_build_src = no
build_flags = -D UNIT_TEST -std=c++17 -D ARDUINO_MOCK -I test/mocks
build_src_filter = +<src/hardware/> +<test/mocks/>
test_filter = test_hardware_abstraction
build_unflags = -D HELTEC_V3_OLED -D OLED_SDA -D OLED_SCL -D LORA_FREQ_MHZ -D LORA_BW_KHZ -D LORA_SF -D LORA_CR -D LORA_TX_DBM

# WiFi functionality testing
[env:native-wifi]
platform = native
framework =
lib_deps =
test_build_src = no
build_flags = -D UNIT_TEST -std=c++17 -D ARDUINO_MOCK -I test/mocks
build_src_filter = +<test/mocks/>
test_filter = test_wifi_*
build_unflags = -D HELTEC_V3_OLED -D OLED_SDA -D OLED_SCL -D LORA_FREQ_MHZ -D LORA_BW_KHZ -D LORA_SF -D LORA_CR -D LORA_TX_DBM

# Integration testing
[env:native-integration]
platform = native
framework =
lib_deps =
test_build_src = no
build_flags = -D UNIT_TEST -std=c++17 -D ARDUINO_MOCK -I test/mocks
build_src_filter = +<src/app_logic.cpp> +<src/hardware/> +<test/mocks/>
test_filter = test_integration
build_unflags = -D HELTEC_V3_OLED -D OLED_SDA -D OLED_SCL -D LORA_FREQ_MHZ -D LORA_BW_KHZ -D LORA_SF -D LORA_CR -D LORA_TX_DBM
